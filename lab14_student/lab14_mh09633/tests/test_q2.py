import pytest
import sys
import os

sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from q2 import GetShortestPath

test_cases = [
    ({'A': [('D', 2), ('E', 6), ('B', 7)], 'B': [('C', 3), ('A', 7)], 'C': [('B', 3), ('D', 2), ('G', 2)], 'D': [('A', 2), ('C', 2), ('F', 8)], 'E': [('A', 6), ('F', 9)], 'F': [('D', 8), ('E', 9), ('G', 4)], 'G': [('C', 2), ('F', 4)]}, 'A', 'A', -1), 
    ({'A': [('D', 2), ('E', 6), ('B', 7)], 'B': [('C', 3), ('A', 7)], 'C': [('B', 3), ('D', 2), ('G', 2)], 'D': [('A', 2), ('C', 2), ('F', 8)], 'E': [('A', 6), ('F', 9)], 'F': [('D', 8), ('E', 9), ('G', 4)], 'G': [('C', 2), ('F', 4)]}, 'A', 'C', [('A', 'D', 2), ('D', 'C', 2)]), 
    ({'A': [('D', 2), ('E', 6), ('B', 7)], 'B': [('C', 3), ('A', 7)], 'C': [('B', 3), ('D', 2), ('G', 2)], 'D': [('A', 2), ('C', 2), ('F', 8)], 'E': [('A', 6), ('F', 9)], 'F': [('D', 8), ('E', 9), ('G', 4)], 'G': [('C', 2), ('F', 4)]}, 'A', 'D', [('A', 'D', 2)]), 
    ({'A': [('D', 2), ('E', 6), ('B', 7)], 'B': [('C', 3), ('A', 7)], 'C': [('B', 3), ('D', 2), ('G', 2)], 'D': [('A', 2), ('C', 2), ('F', 8)], 'E': [('A', 6), ('F', 9)], 'F': [('D', 8), ('E', 9), ('G', 4)], 'G': [('C', 2), ('F', 4)]}, 'A', 'E', [('A', 'E', 6)]), 
    ({'A': [('D', 2), ('E', 6), ('B', 7)], 'B': [('C', 3), ('A', 7)], 'C': [('B', 3), ('D', 2), ('G', 2)], 'D': [('A', 2), ('C', 2), ('F', 8)], 'E': [('A', 6), ('F', 9)], 'F': [('D', 8), ('E', 9), ('G', 4)], 'G': [('C', 2), ('F', 4)]}, 'A', 'G', [('A', 'D', 2), ('D', 'C', 2), ('C', 'G', 2)]),
    ({'A': [('D', 2), ('E', 6), ('B', 7)], 'B': [('C', 3), ('A', 7)], 'C': [('B', 3), ('D', 2), ('G', 2)], 'D': [('A', 2), ('C', 2), ('F', 8)], 'E': [('A', 6), ('F', 9)], 'F': [('D', 8), ('E', 9), ('G', 4)], 'G': [('C', 2), ('F', 4)]}, 'D', 'C', [('D', 'C', 2)]), 
    ({'A': [('D', 2), ('E', 6), ('B', 7)], 'B': [('C', 3), ('A', 7)], 'C': [('B', 3), ('D', 2), ('G', 2)], 'D': [('A', 2), ('C', 2), ('F', 8)], 'E': [('A', 6), ('F', 9)], 'F': [('D', 8), ('E', 9), ('G', 4)], 'G': [('C', 2), ('F', 4)]}, 'C', 'B', [('C', 'B', 3)]), 
    ({'A': [('D', 2), ('E', 6), ('B', 7)], 'B': [('C', 3), ('A', 7)], 'C': [('B', 3), ('D', 2), ('G', 2)], 'D': [('A', 2), ('C', 2), ('F', 8)], 'E': [('A', 6), ('F', 9)], 'F': [('D', 8), ('E', 9), ('G', 4)], 'G': [('C', 2), ('F', 4)]}, 'E', 'F', [('E', 'F', 9)]), 
    ({'A': [('D', 2), ('E', 6), ('B', 7)], 'B': [('C', 3), ('A', 7)], 'C': [('B', 3), ('D', 2), ('G', 2)], 'D': [('A', 2), ('C', 2), ('F', 8)], 'E': [('A', 6), ('F', 9)], 'F': [('D', 8), ('E', 9), ('G', 4)], 'G': [('C', 2), ('F', 4)]}, 'D', 'G', [('D', 'C', 2), ('C', 'G', 2)]), 
    ({'A': [('D', 2), ('E', 6), ('B', 7)], 'B': [('C', 3), ('A', 7)], 'C': [('B', 3), ('D', 2), ('G', 2)], 'D': [('A', 2), ('C', 2), ('F', 8)], 'E': [('A', 6), ('F', 9)], 'F': [('D', 8), ('E', 9), ('G', 4)], 'G': [('C', 2), ('F', 4)]}, 'G', 'B', [('G', 'C', 2), ('C', 'B', 3)]),
    ({'A': [('B', 5)], 'B': [('C', 1)], 'C': [], 'D': []}, 'A', 'D', -1),
    ({'A': [('B', 1), ('C', 4)], 'B': [('C', 2), ('D', 6)], 'C': [('D', 1)], 'D': []}, 'A', 'D', [('A', 'B', 1), ('B', 'C', 2), ('C', 'D', 1)]),
    ({'A': [('B', 1)], 'B': [('C', 2)], 'C': [('A', 3)]}, 'A', 'C', [('A', 'B', 1), ('B', 'C', 2)]),
    ({'A': [('B', 2), ('C', 3)], 'B': [('D', 4)], 'C': [('D', 5)], 'D': []}, 'A', 'D', [('A', 'B', 2), ('B', 'D', 4)]),
    ({'A': [('B', 5), ('C', 10)], 'B': [('D', 2)], 'C': [('D', 7), ('E', 1)], 'D': [('E', 1)], 'E': []}, 'A', 'E', [('A', 'B', 5), ('B', 'D', 2), ('D', 'E', 1)]),
    ({'A': [('B', 3), ('C', 2)], 'B': [('C', 1), ('D', 6)], 'C': [('D', 3)], 'D': [('E', 1)], 'E': []}, 'A', 'E', [('A', 'C', 2), ('C', 'D', 3), ('D', 'E', 1)]),
    ({'A': [], 'B': [], 'C': [], 'D': []}, 'A', 'D', -1),
    ({'A': [('B', 2)], 'B': [('C', 2)], 'C': [('D', 2)], 'D': [('E', 2)], 'E': []}, 'A', 'E', [('A', 'B', 2), ('B', 'C', 2), ('C', 'D', 2), ('D', 'E', 2)]),
    ({'A': [('B', 4)], 'B': [('A', 4), ('C', 2)], 'C': []}, 'A', 'C', [('A', 'B', 4), ('B', 'C', 2)]),
    ({'A': [('B', 1)], 'B': [('C', 3)], 'C': [('D', 5)], 'D': [], 'E': [('F', 2)], 'F': [('G', 3)], 'G': []}, 'A', 'G', -1)
]    

@pytest.mark.parametrize("i", range(len(test_cases)))
def test_getshortestpathfromOtherNode(i):
    graph, source, destination = test_cases[i][0], test_cases[i][1], test_cases[i][2]
    expected = test_cases[i][-1]
    print(GetShortestPath(graph, source, destination))
    assert GetShortestPath(graph, source, destination) == expected